#!/usr/bin/env node

// Module dependencies.
const app = require('../app');
const debug = require('debug')('template:server');
const http = require('http');
require('dotenv').config()

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT);
app.set('port', port);

// Create the HTTP server.
const server = http.createServer(app);

// Listen on the provided port.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // Named pipe.
    return val;
  }

  if (port >= 0) {
    // Port number.
    return port;
  }

  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // Handle specific listener errors with useful messages.
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges.\n');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use.\n');
      process.exit(1);
    default:
      throw error;
  }
}

// Event listener for HTTP server listening.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Server started on ' + bind);
}

// Application ready.
console.log("Launched!")